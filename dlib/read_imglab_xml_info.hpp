#ifndef OCV_DLIB_READ_IMGLAB_XML_INFO_HPP
#define OCV_DLIB_READ_IMGLAB_XML_INFO_HPP

#include <dlib/geometry.h>
#include <dlib/image_processing.h>

#include <string>
#include <tuple>
#include <vector>

/*!
 *  \addtogroup ocv
 *  @{
 */
namespace ocv{

/*!
 *  \addtogroup odlib
 *  @{
 */
namespace odlib{

/**
 * @brief store the image name and associate bounding rect of the
 * xml file generated by imglab(tool of dlib) to img_name and location
 * @param file_name full path of the xml file generated by imglab
 * @param img_name name of the images
 * @param roi roi of the images
 */
void read_imglab_xml_info(std::string const &file_name,
                          std::vector<std::string> &img_name,
                          std::vector<std::vector<dlib::rectangle>> &roi);

/**
 * @brief store the image name and associate bounding rect of the
 * xml file generated by imglab(tool of dlib) to img_name and location
 * @param file_name full path of the xml file generated by imglab
 * @param img_name name of the images
 * @param roi roi of the images
 */
void read_imglab_xml_info(std::string const &file_name,
                          std::vector<std::string> &img_name,
                          std::vector<std::vector<dlib::mmod_rect>> &roi);

/**
 *@overload of read_imglab_xml_info, this function zip img_name and roi together
 */
template<typename T>
void read_imglab_xml_info(std::string const &file_name,
                          std::vector<std::pair<std::string, std::vector<T>>> &output)
{
    static_assert(std::is_same<T, dlib::mmod_rect>::value || std::is_same<T, dlib::rectangle>::value,
                  "T == dlib::mmod_rect || T == dlib::rectangle");

    std::vector<std::string> img_name;
    std::vector<std::vector<T>> roi;

    read_imglab_xml_info(file_name, img_name, roi);
    for(size_t i = 0; i != img_name.size(); ++i){
        output.emplace_back(std::make_pair(std::move(img_name[i]), std::move(roi[i])));
    }
}

/**
 *@overload of read_imglab_xml_info, this function zip img_name and roi together
 */
template<typename T>
void read_imglab_xml_info(std::string const &file_name,
                          std::vector<std::tuple<std::string, std::vector<T>>> &output)
{
    static_assert(std::is_same<T, dlib::mmod_rect>::value || std::is_same<T, dlib::rectangle>::value,
                  "T == dlib::mmod_rect || T == dlib::rectangle");

    std::vector<std::string> img_name;
    std::vector<std::vector<T>> roi;

    read_imglab_xml_info(file_name, img_name, roi);
    for(size_t i = 0; i != img_name.size(); ++i){
        output.emplace_back(std::make_tuple(std::move(img_name[i]), std::move(roi[i])));
    }
}

} /*! @} End of Doxygen Groups*/

} /*! @} End of Doxygen Groups*/

#endif // OCV_DLIB_READ_IMGLAB_XML_INFO_HPP
